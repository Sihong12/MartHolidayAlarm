name: deploy

on:
  deployment:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      UPLOAD_DIR: deploy
      APP_NAME: mart-holiday-alarm
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
    - uses: actions/checkout@v2
    - uses: 8398a7/action-slack@v3
      name: Job start notification
      if: ${{ success() }}
      with:
        status: custom
        author_name: '배포 알림'
        fields: repo,commit,message,action,ref,job,took,workflow,eventName
        custom_payload: |
          { text: `⏱ Started ${process.env.AS_EVENT_NAME} action : ${process.env.AS_JOB} of ${process.env.AS_REPO}` }

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

    - name: Zip build files
      run: |
        sudo apt-get update
        sudo apt-get install zip unzip -qy
        zip -r $APP_NAME *
        ls
    - name: Upload build file to s3
      run: aws s3 cp "$APP_NAME.zip" s3://${{ secrets.PROD_AWS_BUCKET }}${UPLOAD_DIR:+/$UPLOAD_DIR/}
    - name: Deploy
      run: aws deploy create-deployment --application-name $APP_NAME --deployment-group-name "$APP_NAME-group" --s3-location bucket=${{ secrets.PROD_AWS_BUCKET }},bundleType=zip,key="${UPLOAD_DIR:+$UPLOAD_DIR/}${APP_NAME}.zip"

    - name: Job result notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: custom
        author_name: '배포 알림'
        fields: repo,commit,message,action,ref,job,took,workflow,eventName
        custom_payload: |
          {
            text: ('${{ job.status }}' === 'success' ? "🎉 Successd" : '${{ job.status }}' === 'failure' ? "☄️ Failed" : "✖️ Cancelled") + ` ${process.env.AS_EVENT_NAME} action : ${process.env.AS_JOB} of ${process.env.AS_REPO}`,
            attachments: [
              {
                color: '${{ job.status }}' === 'success' ? "#00FF00" : '${{ job.status }}' === 'failure' ? "#FF0000" : "#505050",
                blocks: [
                  {
                    type: "section",
                    fields: [
                      { type: "mrkdwn", text: `*repo:*\n${process.env.AS_REPO}` },
                      { type: "mrkdwn", text: `*branch:*\n${process.env.AS_REF}` },
                      { type: "mrkdwn", text: `*commit:*\n${process.env.AS_MESSAGE} (${process.env.AS_COMMIT})` },
                      { type: "mrkdwn", text: `*job:*\n${process.env.AS_WORKFLOW} -> ${process.env.AS_JOB}` },
                      { type: "mrkdwn", text: `*job event:*\n${process.env.AS_EVENT_NAME}` },
                      { type: "mrkdwn", text: `*elasped time:*\n${process.env.AS_TOOK}` },
                    ]
                  }
                ]
              }
            ]
          }